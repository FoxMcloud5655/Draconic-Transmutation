import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.0.23', changing: true
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'java'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        resources {
            //Add the generated main module resources
            srcDirs += 'src/datagen/generated'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += project.sourceSets.api.output
        runtimeClasspath += project.sourceSets.api.output
    }
    datagen {
        java.srcDirs = ['src/datagen/java']
        resources.srcDirs = ['src/datagen/resources']
        compileClasspath += project.sourceSets.api.output
        compileClasspath += project.sourceSets.main.output
    }
    test {
        compileClasspath += project.sourceSets.api.output
        runtimeClasspath += project.sourceSets.api.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    def compileExtenders = [apiCompile, testCompile, datagenCompile]
    def implementationExtenders = [apiImplementation, testImplementation, datagenImplementation]
    def compileOnlyExtenders = [apiCompileOnly, testCompileOnly, datagenCompileOnly]
    def runtimeOnlyExtenders = [apiRuntimeOnly, datagenRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def implementationExtender : implementationExtenders) {
        implementationExtender.extendsFrom(implementation)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
}

version = "${draconictransmutation_version}"
group= "java.moze_intel" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "draconictransmutation"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory file('run')
            property "mixin.env.disableRefMap", "true"
            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                draconictransmutation {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                }
            }
        }
        server {
            workingDirectory file('run')
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property "mixin.env.disableRefMap", "true"
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                draconictransmutation {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                }
            }
        }
        data {
            workingDirectory file('run')
            environment 'target', 'fmluserdevdata'
            property "mixin.env.disableRefMap", "true"
            if (project.hasProperty('forge_force_ansi')) {
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all', '--output', file('src/datagen/generated/'), '--mod', 'draconictransmutation',
                    '--existing', file('src/main/resources/')

            mods {
                draconictransmutation {
                    sources((SourceSet[]) [sourceSets.main, sourceSets.api, sourceSets.datagen])
                }
            }
        }
    }
}

repositories {
    maven {
        name "MinecraftForge"
        url "https://maven.minecraftforge.net/"
        content {
            includeGroupByRegex 'net\\.minecraftforge.*'
            includeGroup 'de.oceanlabs.mcp'
            includeGroup 'cpw.mods'
        }
    }
    maven {
        name 'JEI'
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'CraftTweaker'
        url "https://maven.blamejared.com"
        content {
            includeGroup 'com.blamejared.crafttweaker'
        }
    }
    maven {
        name 'curios'
        url "https://maven.theillusivec4.top/"
        content {
            includeGroup 'top.theillusivec4.curios'
        }
    }
    maven {
        name 'TOP'
        url "https://maven.tterrag.com/"
        content {
            includeGroupByRegex 'com\\.enderio.*'
            includeGroupByRegex 'com\\.enderzoo.*'
            includeGroupByRegex 'com\\.tterrag.*'
            includeGroupByRegex 'tterrag.*'
            includeGroup 'mcjty.theoneprobe'
            includeGroup 'team.chisel.ctm'
        }
    }
    maven {
        name 'HWYLA'
        url "https://maven.tehnut.info"
        content {
            includeGroup 'mcp.mobius.waila'
        }
    }
    maven { url = 'https://libraries.minecraft.net/' }
}

test {
    useJUnitPlatform()
}
 
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")

    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${crafttweaker_version}")

    compile group: "org.apache.commons", name: "commons-math3", version: "3.6.1"
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
    manifest.attributes([
            "Specification-Title"     : "draconictransmutation",
            "Specification-Vendor"    : "draconictransmutation",
            "Specification-Version"   : "${project.draconictransmutation_version}",
            "Implementation-Title"    : "draconictransmutation",
            "Implementation-Version"  : "${project.draconictransmutation_version}",
            "Implementation-Vendor"   : "draconictransmutation",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand "version": draconictransmutation_version, "mc_version": minecraft_version_range, "forge_version": forge_version_range,
                "loader_version": loader_version_range, "crafttweaker_version": crafttweaker_version_range
    }
    into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    archiveClassifier.set('api')
}

shadowJar {
    from sourceSets.main.output
    from sourceSets.api.output

    // Only shadow apache commons-math3
    dependencies {
        include dependency('org.apache.commons:commons-math3:.*')
    }
    exclude('org/apache/commons/math3/analysis/**')
    exclude('org/apache/commons/math3/complex/**')
    exclude('org/apache/commons/math3/dfp/**')
    exclude('org/apache/commons/math3/distribution/**')
    exclude('org/apache/commons/math3/filter/**')
    exclude('org/apache/commons/math3/fitting/**')
    exclude('org/apache/commons/math3/genetics/**')
    exclude('org/apache/commons/math3/geometry/**')
    exclude('org/apache/commons/math3/linear/**')
    exclude('org/apache/commons/math3/ml/**')
    exclude('org/apache/commons/math3/ode/**')
    exclude('org/apache/commons/math3/optim/**')
    exclude('org/apache/commons/math3/optimization/**')
    exclude('org/apache/commons/math3/primes/**')
    exclude('org/apache/commons/math3/random/**')
    exclude('org/apache/commons/math3/special/**')
    exclude('org/apache/commons/math3/stat/**')
    exclude('org/apache/commons/math3/transform/**')

    exclude('assets/org/**')
    exclude('META-INF/maven/**')

    // Relocate apache commons-math3 to prevent conflicts with other mods that include it
    relocate 'org.apache.commons.math3', 'moze_intel.draconictransmutation.shaded.org.apache.commons.math3'

    archiveClassifier.set('universal') // Replace the default JAR
}

reobf {
    shadowJar {
        // Reobfuscate the shadowed JAR
    }
    apiJar {
        classpath = sourceSets.api.compileClasspath
    }
}

task updateJSON {
	doLast {
    	def updateJsonFile = file('update.json')
    	def updateJson = new JsonSlurper().parse(updateJsonFile) as Map

    	updateJson."${minecraft_version}"."${project.version}" = "See https://www.curseforge.com/minecraft/mc-mods/draconictransmutation/files for detailed information."

    	// Update promos
    	updateJson.promos."${minecraft_version}-latest" = "${project.version}"
    	updateJson.promos."${minecraft_version}-recommended" = "${project.version}"

    	updateJsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(updateJson)))
	}
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

artifacts {
    archives apiJar
}